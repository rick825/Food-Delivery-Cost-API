openapi: 3.0.0
info:
  title: Food Delivery API
  description: API for managing organizations, items, and pricing for a food delivery service.
  version: 1.0.0
servers:
  - url: https://food-delivery-cost-api.onrender.com/
paths:
  /api/getOrganizationData:
    get:
      summary: Retrieve all organizations
      responses:
        '200':
          description: A list of organizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
  /api/getItemData:
    get:
      summary: Retrieve all items
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
  /api/getAllPrice:
    get:
      summary: Retrieve all pricing information
      responses:
        '200':
          description: A list of pricing information
          content:
            application/json:
              schema:
                type: object
                properties:
                  prices:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pricing'
  /api/addOrganizationData:
    post:
      summary: Add a new organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '200':
          description: The added organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /api/updateOrganizationData:
    put:
      summary: Update an organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  organization:
                    $ref: '#/components/schemas/Organization'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/deleteOrganizationData:
    delete:
      summary: Delete an organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Organization deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  deletedOrganization:
                    $ref: '#/components/schemas/Organization'
        '400':
          description: Delete failed or organization not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/addItemData:
    post:
      summary: Add a new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: The added item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /api/updateItemData:
    put:
      summary: Update an item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                type:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  updatedItem:
                    $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/deleteItemData:
    delete:
      summary: Delete an item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        '200':
          description: Item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  deletedItem:
                    $ref: '#/components/schemas/Item'
        '400':
          description: Delete failed or item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/setPrice:
    post:
      summary: Set pricing for an organization and item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_id:
                  type: string
                item_id:
                  type: string
                zone:
                  type: string
                base_distance_in_km:
                  type: number
                fix_price:
                  type: number
      responses:
        '200':
          description: Pricing set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  pricing:
                    $ref: '#/components/schemas/Pricing'
        '400':
          description: Pricing already set or invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/getTotalPrice:
    get:
      summary: Calculate total price for a delivery
      parameters:
        - in: query
          name: zone
          schema:
            type: string
          required: true
          description: The delivery zone
        - in: query
          name: organization_id
          schema:
            type: string
          required: true
          description: The organization ID
        - in: query
          name: total_distance
          schema:
            type: number
          required: true
          description: The total distance of the delivery
        - in: query
          name: item_type
          schema:
            type: string
          required: true
          description: The type of item ('perishable' or 'non-perishable')
      responses:
        '200':
          description: Total price calculated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_price:
                    type: number
components:
  schemas:
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        description:
          type: string
    Pricing:
      type: object
      properties:
        organization_id:
          type: string
          format: uuid
        item_id:
          type: string
          format: uuid
        zone:
          type: string
        base_distance_in_km:
          type: number
        km_price:
          type: number
        fix_price:
          type: number
